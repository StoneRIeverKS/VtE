pull(estimate)
beta1
##OVB1 = alpha1-beta1
OVB1 = alpha1-beta1
OVB1
##gamma1
gamma1 = treatment_coef %>%
filter(model_index == "reg_C") %>%
pull(estimate)
gamma1
history_coef
##beta4
beta4 = history_coef["estimate"]
beta4
##OVB2 = gamma1*beta4
OVB2 = gamma1*beta4
OVB1]
OVB1
OVB2
beta4]
beta4
beta1
biased_data
cor(biased_data["history"], baiased_data["treatment"])
cor(biased_data["history"], biased_data["treatment"])
cor(biased_data["history"], biased_data["spend"])
formula_vec
formula_vec$reg_A
models
models = enframe(formula_vec, name = "model_index", value = "formula")
models = enframe(formula_vec, name = "model_index", value = "formula")
models = enframe(formula_vec, name = "model_index", value = "formula")
models
help(lm)
df_results = df_models %>%
mutate(formula = as.character(formula)) %>%
select(formula, model_index, lm_result) %>%
)
df_results = df_models %>%
mutate(formula = as.character(formula)) %>%
select(formula, model_index, lm_result)
library("broom")
library("tidyverse")
df_results = df_models %>%
mutate(formula = as.character(formula)) %>%
select(formula, model_index, lm_result)
df_results
df_results = df_models %>%
mutate(formula = as.character(formula)) %>%
select(formula, model_index, lm_result) %>%
unnest(cols = c(lm_result))
df_results
df_results = df_models %>%
+     mutate(formula = as.character(formula)) %>%
+     select(formula, model_index, lm_result)
df_results = df_models %>%
+     mutate(formula = as.character(formula)) %>%
+     select(formula, model_index, lm_result)
df_results = df_models %>%
mutate(formula = as.character(formula)) %>%
select(formula, model_index, lm_result)
df_results
alpha_1
alpha1
beta1
OVB1
OVB2
biased_data
table(biased_data["treatment"], biased_data["visit"])
biased_data["treatment"]
biased_data["treatment"][1]
biased_data["treatment"][2]
t(biased_data["treatment"])
t(biased_data["treatment"])[1]
t(biased_data["treatment"])[2]
t(biased_data["treatment"])[3]
table(t(biased_data["treatment"]), t(biased_data["visit"]))
sum(t(biased_data["treatment"])==TRUE)
14937+1643
12405+3026
14937+1643
library("broom")
library("tidyverse")
#visitを共変量に含めた回帰モデル
formula_vec_visit = c(spend ~ treatment + recency + channel + history + visit,
visit ~ treatment + recency + channel + history
)
models_visit = enframe(formula_vec_visit)
models_visit
#モデルをデータフレームに変換する
models_visit = enframe(formula_vec_visit, value = "formula")
models_visit
df_models_visit = models_visit %>%
mutate(models = map(.x = formula, .f = lm, data = biased_data)) %>%
muteta(coef = map(.x = models, .f = tidy))
df_models_visit = models_visit %>%
mutate(models = map(.x = formula, .f = lm, data = biased_data)) %>%
mutate(coef = map(.x = models, .f = tidy))
df_models_visit
unnest(df_models_visit)
unnest(df_models_visit, cols=c(formula))
unnest(mutate(df_models_visit, formula = as.character(formula)), cols=c(formula))
df_results
treatment_coef
df_results = df_models %>%
mutate(formula = as.character(formula)) %>%
select(formula, model_index, lm_result) %>%
unnest(cols = c(lm_result))
df_results
df_models_visit
unnest(mutate(df_models_visit, formula = as.character(formula)), cols=c(coef))
#各モデルに対して回帰モデルを実行
df_models_visit = models_visit %>%
mutate(models = map(.x = formula, .f = lm, data = biased_data)) %>%
mutate(coef = map(.x = models, .f = tidy)) %>%
mutate(formula = as.character(formula)) %>%
unnest(cols = c(coef))
df_models_visit
alpha = df_models_visit %>%
filter(formula = "spend ~ treatment + recency + channel + history + visit",
term = "visit") %>%
pull(estimate)
#OVBに必要な回帰係数を取り出す
alpha = df_models_visit %>%
filter(formula == "spend ~ treatment + recency + channel + history + visit",
term == "visit") %>%
pull(estimate)
alpha
beta = df_models_visit %>%
filter(formula == "visit ~ treatment + recency + channel + history",
term == "treatment") %>%
pull(estimate)
beta
apla*beta
alpha*beta
alpha*beta
#visitを入れた回帰モデルを用いて効果を測定した結果
tau = df_models_visit %>%
filter(formula == "spend ~ treatment + recency + channel + history + visit",
term == "treatment") %>%
pull(estimate)
tau
#ライブラリとデータセットの読み込み
remotes::install_github("itamarcaspi/experimentdatar") #remotesパッケージ内のinstall_github関数でgithub上のパッケージを読み込んだ
#ライブラリとデータセットの読み込み
devtools::install_github("itamarcaspi/experimentdatar") #remotesパッケージ内のinstall_github関数でgithub上のパッケージを読み込んだ
#ライブラリとデータセットの読み込み
devtools::install_github("itamarcaspi/experimentdatar")
#ライブラリとデータセットの読み込み
install.packages(remotes)
#ライブラリとデータセットの読み込み
install.packages("remotes")
remotes::install_github("itamarcaspi/experimentdatar")
library(experimentdatar)
library(broom)
library(tidyverse)
data("vouchers")
help("data")
head(vouchers)
help(vouchers)
paste(c(a,b,c), sep="+")
paste(c(a,b,c))
paste(c("a","b","c"), sep="+")
paste(c("a","b","c"),c("v") sep="+")
paste(c("a","b","c"),c("v"), sep="+")
#回帰式の準備
##介入変数
formula_x_base = "VOUCHO"
##共変量
formula_x_covariate = "SVY + HSVISIT + AGE + STRATA1 + STRATA2 + STRATA3 + STRATA4 +
STRATA5 + STRATA6 + STRATAMS + D1993 + D1995 + D1997 + DMONTH1 +
DMONTH2 + DMONTH3 + DMONTH4 + DMONTH5 + DMONTH6 + DMONTH7 +
DMONTH8 + DMONTH9 + DMONTH10 + DMONTH11 + DMONTH12 + SEX2"
colnames(vouchers)
##目的変数
formula_y = c("TOTSCYRS",
"INSCHL",
"PRSCH_C",
"USNGSCH",
"PRSCHA_1",
"FINISH6",
"FINISH7",
"FINISH8",
"REPT",
"NREPT",
"MARRIED",
"HASCHILD",
"HOURSUM",
"WORKING")
dim("vouchers")
dim(vouchers)
hist(vouchers["TOTSCVRS"])
hist(t(vouchers["TOTSCVRS"])
)
vouchers["TOTSCVRS"]
colnames(vouchers)
##目的変数
formula_y = c("TOTSCYRS",
"INSCHL",
"PRSCH_C",
"USNGSCH",
"PRSCHA_1",
"FINISH6",
"FINISH7",
"FINISH8",
"REPT",
"NREPT",
"MARRIED",
"HASCHILD",
"HOURSUM",
"WORKING")
vouchers["TOTSCVRS"]
vouchers["TOTSCYRS"]
host(vouchers["TOTSCYRS"])
hist(vouchers["TOTSCYRS"])
hist(t(vouchers["TOTSCYRS"])
)
table(t(voucher["TOTSCURS"]))
table(t(vouchers["TOTSCURS"]))
table(t(vouchers["TOTSCYRS"]))
##共変量を含まない回帰式
base_reg_formula = paste(formula_y, formula_x_base, sep = "~")
base_reg_fromula
base_reg_formula
names(base_reg_formula) = paste(formula_y, "base", sep = "_")
base_reg_formula
covariate_reg_formula = paste(formula_y, formula_x_covariate, sep = "~")
names(covariate_reg_formula) = paste(formula_y, "covariate", sep = "_")
##モデル式のベクトルを作成
table3_formula = c(base_reg_formula, covariate_reg_formula)
##回帰分析を実行
vouchers["TAB3SMPL"]
#回帰分析を実行
##bogota 1995のデータを抽出
regression_data = vouchers %>%
filter(TAB3SMPL == 1, BOG95SMP == 1)
##モデル式のデータをデータフレーム化する
models = table3_formula %>%
enframe(name = "model_index", value = "formula")
#回帰分析を実行
##bogota 1995のデータを抽出
regression_data = vouchers %>%
filter(TAB3SMPL == 1, BOG95SMP == 1)
##まとめて回帰分析を実行
df_models = models %>%
mutate(model = map(.x = formula, .f = lm, data = regression_data)) %>%
mutate(lm_result = map(.x = model, .f = tidy))
#回帰式の準備
##介入変数
formula_x_base = "VOUCH0"
formula_x_base = "VOUCH0"
##共変量
formula_x_covariate = "SVY + HSVISIT + AGE + STRATA1 + STRATA2 + STRATA3 + STRATA4 +
STRATA5 + STRATA6 + STRATAMS + D1993 + D1995 + D1997 + DMONTH1 +
DMONTH2 + DMONTH3 + DMONTH4 + DMONTH5 + DMONTH6 + DMONTH7 +
DMONTH8 + DMONTH9 + DMONTH10 + DMONTH11 + DMONTH12 + SEX2"
##目的変数
formula_y = c("TOTSCYRS",
"INSCHL",
"PRSCH_C",
"USNGSCH",
"PRSCHA_1",
"FINISH6",
"FINISH7",
"FINISH8",
"REPT",
"NREPT",
"MARRIED",
"HASCHILD",
"HOURSUM",
"WORKING")
##共変量を含まない回帰式
base_reg_formula = paste(formula_y, formula_x_base, sep = "~")
names(base_reg_formula) = paste(formula_y, "base", sep = "_")
##共変量を含む回帰式
covariate_reg_formula = paste(formula_y, formula_x_covariate, sep = "~")
names(covariate_reg_formula) = paste(formula_y, "covariate", sep = "_")
##モデル式のベクトルを作成
table3_formula = c(base_reg_formula, covariate_reg_formula)
##モデル式のデータをデータフレーム化する
models = table3_formula %>%
enframe(name = "model_index", value = "formula")
#回帰分析を実行
##bogota 1995のデータを抽出
regression_data = vouchers %>%
filter(TAB3SMPL == 1, BOG95SMP == 1)
##まとめて回帰分析を実行
df_models = models %>%
mutate(model = map(.x = formula, .f = lm, data = regression_data)) %>%
mutate(lm_result = map(.x = model, .f = tidy))
##モデルの結果を整形
df_results = df_models %>%
mutate(formula = as.character(formula)) %>%
mutate(formula, model_index, lm_result) %>%
unnest(cols = c(lm_result))
df_results
#回帰分析の結果を確認
using_voucher_results = df_results %>%
filter(term == "VOUCH0", str_detect(model_index, "PRSCHA_1|USNGSCH")) %>%
select(model_index, term, estimate, std.error, p.value) %>%
arrange(model_index)
using_voucher_results
table3_formula
names(table3_formula)
df_results
df_results["model_index"]
models
models["model_index"]
models["model_index", 1:28]
models["model_index"][1]
t(models["model_index"])
df_models
t(df_models["model_index"])
t(using_voucher_results["model_index"])
t(df_results["model_index"])
df_results
df_results %>% filter(term=="VOUCH0")
df_results %>% filter(str_detect(model_index, "covariate"))
base_reg_formula
##共変量を含む回帰式
covariate_reg_formula = paste(base_reg_formula, formula_x_covariate, sep = "+")
covariate_reg_formula
base_reg_formula
formula_x_covariate
covariate_reg_formula
covariate_reg_formula = paste(base_reg_formula, formula_x_covariate, sep = "+")
names(covariate_reg_formula) = paste(formula_y, "covariate", sep = "_")
##モデル式のベクトルを作成
table3_formula = c(base_reg_formula, covariate_reg_formula)
##モデル式のデータをデータフレーム化する
models = table3_formula %>%
enframe(name = "model_index", value = "formula")
#回帰分析を実行
##bogota 1995のデータを抽出
regression_data = vouchers %>%
filter(TAB3SMPL == 1, BOG95SMP == 1)
##まとめて回帰分析を実行
df_models = models %>%
mutate(model = map(.x = formula, .f = lm, data = regression_data)) %>%
mutate(lm_result = map(.x = model, .f = tidy))
##モデルの結果を整形
df_results = df_models %>%
mutate(formula = as.character(formula)) %>%
mutate(formula, model_index, lm_result) %>%
unnest(cols = c(lm_result))
#回帰分析の結果を確認
using_voucher_results = df_results %>%
filter(term == "VOUCH0", str_detect(model_index, "PRSCHA_1|USNGSCH")) %>%
select(model_index, term, estimate, std.error, p.value) %>%
arrange(model_index)
using_voucher_results
install.packages("ggplot2")
library("ggplot2")
install.packages("ggplot2")
##データの整形
need_y = "FINISH6_covariate|FINISH7_covariate|FINISH8_covariate
|INSCHL_covariate|NREPT_covariate|PRSCH_C_covariate
|REPT_covariate|REPT6_covariate"
need_voucher_results = df_results %>%
filter(term == "VOUCH0", str_detect(model_index,need_y)) %>%
select(model_index, term, estimate, std.error, p.value) %>%
arrange(model_index)
library(broom)
library(tidyverse)
need_voucher_results = df_results %>%
filter(term == "VOUCH0", str_detect(model_index,need_y)) %>%
select(model_index, term, estimate, std.error, p.value) %>%
arrange(model_index)
need_voucher_results
need_y
##データの整形
need_y = "FINISH6_covariate|FINISH7_covariate|FINISH8_covariate|INSCHL_covariate|NREPT_covariate|PRSCH_C_covariate|REPT_covariate|REPT6_covariate"
need_voucher_results = df_results %>%
filter(term == "VOUCH0", str_detect(model_index,need_y)) %>%
select(model_index, term, estimate, std.error, p.value) %>%
arrange(model_index)
need_y
need_voucher_results
need_y
##目的変数
formula_y = c("TOTSCYRS",
"INSCHL",
"PRSCH_C",
"USNGSCH",
"PRSCHA_1",
"FINISH6",
"FINISH7",
"FINISH8",
"REPT",
"NREPT",
"MARRIED",
"HASCHILD",
"HOURSUM",
"WORKING"
"REPT6")
##目的変数
formula_y = c("TOTSCYRS",
"INSCHL",
"PRSCH_C",
"USNGSCH",
"PRSCHA_1",
"FINISH6",
"FINISH7",
"FINISH8",
"REPT",
"NREPT",
"MARRIED",
"HASCHILD",
"HOURSUM",
"WORKING",
"REPT6")
base_reg_formula = paste(formula_y, formula_x_base, sep = "~")
names(base_reg_formula) = paste(formula_y, "base", sep = "_")
##共変量を含む回帰式
covariate_reg_formula = paste(base_reg_formula, formula_x_covariate, sep = "+")
names(covariate_reg_formula) = paste(formula_y, "covariate", sep = "_")
##モデル式のベクトルを作成
table3_formula = c(base_reg_formula, covariate_reg_formula)
##モデル式のデータをデータフレーム化する
models = table3_formula %>%
enframe(name = "model_index", value = "formula")
#回帰分析を実行
##bogota 1995のデータを抽出
regression_data = vouchers %>%
filter(TAB3SMPL == 1, BOG95SMP == 1)
##まとめて回帰分析を実行
df_models = models %>%
mutate(model = map(.x = formula, .f = lm, data = regression_data)) %>%
mutate(lm_result = map(.x = model, .f = tidy))
##モデルの結果を整形
df_results = df_models %>%
mutate(formula = as.character(formula)) %>%
mutate(formula, model_index, lm_result) %>%
unnest(cols = c(lm_result))
#回帰分析の結果を確認
using_voucher_results = df_results %>%
filter(term == "VOUCH0", str_detect(model_index, "PRSCHA_1|USNGSCH")) %>%
select(model_index, term, estimate, std.error, p.value) %>%
arrange(model_index)
need_voucher_results = df_results %>%
filter(term == "VOUCH0", str_detect(model_index,need_y)) %>%
select(model_index, term, estimate, std.error, p.value) %>%
arrange(model_index)
need_voucher_results
0.0229-0.0120
0.0229-0.0120*1.96
0.0229+0.0120*1.96
0.153+0.0278*1.96
0.153-0.0278*1.96
###必要な推定量と標準偏差
need_voucher_results = df_results %>%
filter(term == "VOUCH0", str_detect(model_index,need_y)) %>%
select(model_index, estimate, std.error) %>%
mutate(upper = estimate+1.96*std.error, lower = estimate-1.96*std.error)
need_voucher_results
###必要な推定量と標準偏差
need_voucher_results = df_results %>%
filter(term == "VOUCH0", str_detect(model_index,need_y)) %>%
select(model_index, estimate, std.error) %>%
mutate(upper = estimate+1.96*std.error, lower = estimate-1.96*std.error) %>%
arrange(model_index)
need_voucher_results
##グラフの描画
ryunen_sinkyu = ggplot(data = need_voucher_results, mapping = aes(x = model_index, y = estimate))
print(ryunen_sinkyu)
##グラフの描画
ryunen_sinkyu = ggplot(data = need_voucher_results, mapping = aes(x = model_index, y = estimate))+geom_print()
##グラフの描画
ryunen_sinkyu = ggplot(data = need_voucher_results, mapping = aes(x = model_index, y = estimate))+geom_point()
print(ryunen_sinkyu)
##グラフの描画
ryunen_sinkyu = ggplot(data = need_voucher_results, mapping = aes(x = model_index, y = estimate)) +
geom_point()
print(ryunen_sinkyu)
##グラフの描画
ryunen_sinkyu = ggplot(data = need_voucher_results, mapping = aes(x = model_index, y = estimate)) +
geom_point() +
geom_hline(yintercept=0)
print(ryunen_sinkyu)
##グラフの描画
ryunen_sinkyu = need_voucher_results %>%
ggplot(mapping = aes(x = model_index, y = estimate)) +
geom_point() +
geom_hline(yintercept=0) +
geom_errorbar(aes(ymax = estimate + std.error*1.96,
ymin = estimate - std.error*1.96,
width = 0.1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
plot.margin = margin(0.5,1,0.5,1, "cm"))
library("ggplot2")
library(broom)
library(tidyverse)
##グラフの描画
ryunen_sinkyu = need_voucher_results %>%
ggplot(mapping = aes(x = model_index, y = estimate)) +
geom_point() +
geom_hline(yintercept=0) +
geom_errorbar(aes(ymax = estimate + std.error*1.96,
ymin = estimate - std.error*1.96,
width = 0.1)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
plot.margin = margin(0.5,1,0.5,1, "cm"))
print(ryunen_sinkyu)
##wdの設定
wd = "C:\\Users\\stone\\Documents\\統計\\効果検証入門\\code"
setwd(wd)
##グラフの保存
ggsave(file = "ryunen_sinkyu.png", plot = ryunen_sinkyu)
